{"version":3,"sources":["firebase.js","chatapiService.js","assets/images/botz.png","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","chatBot","axios","create","baseURL","App","domElement","useState","showBot","setShowBot","chats","setChats","bot","setBot","loading","setLoading","message","setMessage","getAttribute","docRef","doc","useEffect","onSnapshot","snapshot","exists","data","console","log","getResponse","intents","query","a","training_data","post","handleSubmit","e","preventDefault","id","uuidv4","reply","className","theme","start","end","name","onClick","style","fontSize","map","chat","content","type","value","placeholder","onChange","target","onKeyPress","key","color","src","logo","width","height","Chat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Div","document","querySelector","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.28740e07.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport {getFirestore} from \"firebase/firestore\"\r\n\r\n\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDM19_KCp_-BSKPdZJjkVTS7rS00zUWkUE\",\r\n  authDomain: \"botz-5e86b.firebaseapp.com\",\r\n  databaseURL: \"https://botz-5e86b-default-rtdb.firebaseio.com\",\r\n  projectId: \"botz-5e86b\",\r\n  storageBucket: \"botz-5e86b.appspot.com\",\r\n  messagingSenderId: \"114979646600\",\r\n  appId: \"1:114979646600:web:dc434282b5b61e473ac33d\",\r\n  measurementId: \"G-010RM283DY\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n\r\nexport const db=getFirestore(app)\r\n","import axios from \"axios\"\r\n\r\n\r\n\r\nconst chatBot=axios.create({\r\n    baseURL:\"http://127.0.0.1:8000\"\r\n\r\n})\r\n\r\n\r\nexport default chatBot;","export default __webpack_public_path__ + \"static/media/botz.b8ef0ed6.png\";","import React ,{useState,useEffect} from 'react';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\r\n\r\nimport {db} from \"./firebase\"\r\n\r\nimport { onSnapshot,doc } from 'firebase/firestore';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nimport chatBot from './chatapiService';\r\n\r\nimport logo from \"./assets/images/botz.png\"\r\n\r\n\r\nexport default function App({domElement}){\r\n\r\n\r\n    const [showBot,setShowBot]=useState(false);\r\n\r\n\r\n    const [chats,setChats]=useState([])\r\n\r\n    const [bot,setBot]=useState({})\r\n\r\n\r\n    const[loading,setLoading]=useState(false)\r\n\r\n    const [message,setMessage]=useState(\"\")\r\n\r\n\r\n    const appId=domElement.getAttribute(\"appId\")\r\n\r\n    const docRef=doc(db,\"users\",appId)\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n      const unsub=onSnapshot(docRef,(snapshot)=>{\r\n\r\n            if(snapshot.exists()){\r\n\r\n                setBot(snapshot.data().bot)\r\n\r\n            }\r\n\r\n        console.log(snapshot.data())\r\n\r\n\r\n      })\r\n\r\n\r\n    },[])\r\n\r\n\r\n\r\n  const getResponse=async(intents,query)=>{\r\n\r\n\r\n    const training_data={\r\n        'data':{\r\n            'intents':intents\r\n        },\r\n        'query':query\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    const data=await chatBot.post(\"/predict\",training_data)\r\n  \r\n    if(data){\r\n      setLoading(false)\r\n    }\r\n\r\n    console.log(data)\r\n   return data.data \r\n    \r\n    }\r\n\r\n    const handleChange=(e)=>{\r\n\r\n      setMessage(e.target.value)\r\n      \r\n    }\r\n\r\n    const handlePress=(e)=>{\r\n\r\n      if(e.key==\"Enter\"){\r\n        handleSubmit(e)\r\n      }\r\n\r\n    }\r\n\r\n\r\n    const handleSubmit=async(e)=>{\r\n        e.preventDefault()\r\n        \r\n        setLoading(true)\r\n        const data=await getResponse(bot.intents,message)\r\n\r\n        console.log(data)\r\n        setChats([...chats,{id:uuidv4(),message:message,bot:false},{id:uuidv4(),message:data.reply,bot:true}])\r\n\r\n        setMessage(\"\")\r\n\r\n    \r\n\r\n    }\r\n\r\n\r\n \r\n    return (\r\n      <div>\r\n      \r\n      {showBot&&\r\n      <div className='flex flex-col  h-full w-full z-50  fixed right-0 bottom-0 top-0 rounded-3xl  justify-start  bg-white border self-end md:w-1/3 top-auto  lg:h-3/4 px-0 py-0'>\r\n        \r\n        {/* Chatbot Header */}\r\n  \r\n        <div className={`flex justify-between items-center w-full p-4 rounded-tr-xl rounded-tl-xl   bg-gradient-to-r ${bot.theme.start} ${bot.theme.end}`}>\r\n          <h1 className=\"text-2xl  text-gray-50\">{bot?.name}</h1>\r\n\r\n        <button className=\"text-2xl font-extrabold text-gray-50 \" onClick={()=>{setShowBot(false)}}><MoreHorizIcon style={{fontSize:\"2.5rem\"}}/></button>\r\n  \r\n       \r\n          </div>\r\n  \r\n          \r\n        {/* Chatbot Content Section */}\r\n  \r\n          <div className=\"flex relative top-0 bottom-50 w-full h-full flex-col overflow-y-auto  p-10\">\r\n  \r\n\r\n          {chats.map((chat)=>{\r\n\r\n                return <Chat key={chat.id} bot={chat.bot} content={chat.message} theme={bot.theme} name={bot.name}/>\r\n\r\n\r\n          })}\r\n\r\n          {loading&&<>\r\n            \r\n            <Chat key={uuidv4()} bot={false} content={message} theme={bot.theme}  name={bot.name}/>\r\n            <Chat key={uuidv4()} bot={true} content={null} theme={bot.theme}  name={bot.name}/>\r\n\r\n            </>}\r\n\r\n\r\n        \r\n\r\n          </div>\r\n  \r\n  \r\n               {/* Chatbot Input Section */}\r\n  \r\n          <div className=\"flex justify-evenly py-2 bottom-0  w-full relative border-t border-gray-300 bg-gray-50\">\r\n    \r\n          <input type=\"text\" className=\"p-5 h-full w-full outline-none  rounded-lg text-lg md:text-xl\" value={message} placeholder=\"Type a Message\" onChange={handleChange} onKeyPress={handlePress} />\r\n          {message&&<button type=\"submit\" className={`px-5 py-3 rounded-full mr-5 drop-shadow cursor-pointer bg-gradient-to-r ${bot.theme.start} ${bot.theme.end}`} onClick={handleSubmit} ><SendIcon style={{fontSize:\"1.rem\",color:\"white\"}}/></button>}\r\n\r\n          </div>\r\n      \r\n  \r\n        </div>}\r\n  \r\n               {/* Chatbot Show */}\r\n        \r\n        {!showBot&&<button className={`  rounded-full text-2xl font-bold fixed bottom-5 right-5 z-50`} onClick={()=>{setShowBot(!showBot)}}>\r\n            <img src={logo} width={60} height={60} className=\"\"/>\r\n          </button>}\r\n  \r\n  \r\n          \r\n  \r\n  \r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nconst Chat=({content,bot,theme,name})=>{\r\n\r\n  const [loading,setLoading]=useState(true)\r\n  \r\n  \r\n  useEffect(()=>{\r\n  \r\n    if(content){\r\n      setLoading(false)\r\n    }\r\n  \r\n  },[])\r\n  \r\n    return <div className={bot?`flex flex-col flex-wrap w-fit text-gray-100  p-3 max-w-xs m-2 bg-gradient-to-r ${theme.start} ${theme.end} rounded-tl-2xl rounded-br-2xl rounded-tr-2xl self-start`:\"flex flex-col flex-wrap max-w-xs p-5 m-2 bg-gray-200 border rounded-tl-2xl rounded-tr-2xl rounded-bl-2xl w-fit self-end\"}>\r\n      \r\n      <div >\r\n      {bot?<p>{name}</p>:<p>You</p>}\r\n      </div>\r\n      {loading?<p className='text-sm font-medium lg:text-lg'>...</p>:<p className=\"text-sm font-medium lg:text-lg\">{content}</p>}\r\n       \r\n      </div>\r\n  \r\n  \r\n\r\n  \r\n  }\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n//const root = ReactDOM.createRoot(document.getElementById('root'));\r\nconst Div=document.querySelector(\".chatbot\")\r\n\r\nconsole.log(\"Div: \", Div)\r\n\r\n//const WidgetDivs = document.querySelectorAll('.reddit_widget')\r\n\r\n//Inject our React App into each\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <App domElement={Div}/>\r\n  </React.StrictMode>,\r\nDiv\r\n);\r\n// WidgetDivs.forEach(Div=> {\r\n  \r\n//   return\r\n// })\r\n\r\n\r\n// root.render(\r\n//   <React.StrictMode>\r\n//     <App domElement={chatbot}/>\r\n//   </React.StrictMode>\r\n// );\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}