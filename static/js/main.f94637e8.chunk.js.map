{"version":3,"sources":["firebase.js","chatapiService.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","chatBot","axios","create","baseURL","App","domElement","useState","showBot","setShowBot","chats","setChats","bot","setBot","loading","setLoading","message","setMessage","getAttribute","docRef","doc","useEffect","onSnapshot","snapshot","exists","data","console","log","getResponse","intents","query","a","training_data","post","handleSubmit","e","preventDefault","id","uuidv4","reply","className","name","onClick","style","fontSize","map","chat","Chat","content","type","value","placeholder","onChange","target","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","WidgetDivs","document","querySelectorAll","forEach","Div","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f94637e8.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {getFirestore} from \"firebase/firestore\"\n\n\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDM19_KCp_-BSKPdZJjkVTS7rS00zUWkUE\",\n  authDomain: \"botz-5e86b.firebaseapp.com\",\n  databaseURL: \"https://botz-5e86b-default-rtdb.firebaseio.com\",\n  projectId: \"botz-5e86b\",\n  storageBucket: \"botz-5e86b.appspot.com\",\n  messagingSenderId: \"114979646600\",\n  appId: \"1:114979646600:web:dc434282b5b61e473ac33d\",\n  measurementId: \"G-010RM283DY\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n\nexport const db=getFirestore(app)\n","import axios from \"axios\"\n\n\n\nconst chatBot=axios.create({\n    baseURL:\"http://127.0.0.1:8000\"\n\n})\n\n\nexport default chatBot;","import React ,{useState,useEffect} from 'react';\nimport SendIcon from '@mui/icons-material/Send';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\n\nimport {db} from \"./firebase\"\n\nimport { onSnapshot,doc } from 'firebase/firestore';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n\nimport chatBot from './chatapiService';\n\n\n\nexport default function App({domElement}){\n\n\n    const [showBot,setShowBot]=useState(false);\n\n\n    const [chats,setChats]=useState([])\n\n    const [bot,setBot]=useState({})\n\n\n    const[loading,setLoading]=useState(false)\n\n    const [message,setMessage]=useState()\n\n    const appId=domElement.getAttribute(\"appId\")\n\n    const docRef=doc(db,\"users\",appId)\n\n\n    useEffect(()=>{\n\n      const unsub=onSnapshot(docRef,(snapshot)=>{\n\n            if(snapshot.exists()){\n\n                setBot(snapshot.data().bot)\n\n            }\n\n        console.log(snapshot.data())\n\n\n      })\n\n\n    },[])\n\n\n\n  const getResponse=async(intents,query)=>{\n\n\n    const training_data={\n        'data':{\n            'intents':intents\n        },\n        'query':query\n    }\n\n    \n\n    \n\n    const data=await chatBot.post(\"/predict\",training_data)\n  \n    if(data){\n      setLoading(false)\n    }\n\n    console.log(data)\n   return data.data \n    \n    }\n\n\n    const handleSubmit=async(e)=>{\n        e.preventDefault()\n        console.log(message)\n\n\n      \n  \n        setLoading(true)\n        const data=await getResponse(bot.intents,message)\n\n        console.log(data)\n        setChats([...chats,{id:uuidv4(),message:message,bot:false},{id:uuidv4(),message:data.reply,bot:true}])\n\n        setMessage(\"\")\n\n    \n\n    }\n  \n    return (\n      <div>\n      \n      {showBot&&\n      <div className='flex flex-col  h-full w-full z-50  fixed right-0 bottom-0 top-0  justify-start  bg-white border self-end md:w-1/3 top-auto lg:h-3/4 px-0 py-0'>\n        \n        {/* Chatbot Header */}\n  \n        <div className=\"flex justify-between items-center w-full p-4   bg-gradient-to-r from-blue-500 to-indigo-800 \">\n          <h1 className=\"text-2xl font-extrabold text-gray-50\">{bot?.name}</h1>\n\n          <button className=\"text-2xl font-extrabold text-gray-50 \" onClick={()=>{setShowBot(false)}}><MoreHorizIcon style={{fontSize:\"2.5rem\"}}/></button>\n  \n       \n          </div>\n  \n          \n        {/* Chatbot Content Section */}\n  \n          <div className=\"flex relative top-0 bottom-50 w-full h-full flex-col overflow-y-auto  p-10\">\n  \n\n          {chats.map((chat)=>{\n\n                return <Chat key={chat.id} bot={chat.bot} content={chat.message}/>\n\n\n          })}\n\n          {loading&&<>\n            \n            <Chat key={uuidv4()} bot={false} content={message}/>\n            <Chat key={uuidv4()} bot={true} content={null}/>\n\n            </>}\n\n\n        \n\n          </div>\n  \n  \n               {/* Chatbot Input Section */}\n  \n          <div className=\"flex justify-evenly bottom-0  w-full relative border-t border-gray-300 bg-gray-50\">\n    \n          <input type=\"text\" className=\"p-5 h-full w-full outline-none  rounded-lg text-lg md:text-xl\" value={message} placeholder=\"Type a Message\" onChange={(e)=>{setMessage(e.target.value)}}/>\n          {message&&<button type=\"submit\" className=\"relative py-2 px-4 rounded-full  drop-shadow cursor-pointer\" onClick={handleSubmit}><SendIcon style={{fontSize:\"2rem\",color:\"blue\"}}/></button>}\n\n          </div>\n      \n  \n        </div>}\n  \n               {/* Chatbot Show */}\n        \n        {!showBot&&<button className=\"bg-gradient-to-r from-blue-500 to-indigo-800 px-5 py-3 rounded-full text-2xl font-bold fixed bottom-5 right-5 z-50\" onClick={()=>{setShowBot(!showBot)}}>\n            <h1>Z</h1>\n          </button>}\n  \n  \n          \n  \n  \n      </div>\n    )\n\n}\n\nfunction Chat({content,bot}){\n\nconst [loading,setLoading]=useState(true)\n\n\nuseEffect(()=>{\n\n  if(content){\n    setLoading(false)\n  }\n\n},[])\n\n  return <div className={bot?\"flex flex-wrap  text-gray-100  p-3 max-w-xs m-2 bg-gradient-to-r from-blue-500 to-indigo-800 rounded-tl-2xl rounded-br-2xl rounded-tr-2xl self-start\":\"flex flex-wrap max-w-xs p-5 m-2 bg-gray-200 border rounded-tl-2xl rounded-tr-2xl rounded-bl-2xl self-end\"}>\n      \n    {loading?<p className='text-sm font-medium lg:text-lg'>...</p>:<p className=\"text-sm font-medium lg:text-lg\">{content}</p>}\n     \n    </div>\n\n\n\n\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//const root = ReactDOM.createRoot(document.getElementById('root'));\nconst WidgetDivs=document.querySelectorAll(\".chatbot\")\n\nconsole.log(WidgetDivs)\n\n//const WidgetDivs = document.querySelectorAll('.reddit_widget')\n\n//Inject our React App into each\nWidgetDivs.forEach(Div=> {\n  \n  return ReactDOM.render(\n      <React.StrictMode>\n      <App domElement={Div}/>\n      </React.StrictMode>,\n    Div\n  );\n})\n\n\n// root.render(\n//   <React.StrictMode>\n//     <App domElement={chatbot}/>\n//   </React.StrictMode>\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}